Dockerizing development workflow
ITRally
16 May 2015
Tags: docker

Orest Ivasiv
Software engineer, Softserve
Docker hobbyist
halyph@gmail.com
http://halyph.com
@halyph

* Outline
1. What is Docker?
2. Internals of Docker
3. Docker basic commands
4. Sample usage

* History
.image  dockerizing_development_workflow/docker-wikipedia.jpg
.caption source Wikipedia
Docker was released as open source in *March* *2013*

* History
.image dockerizing_development_workflow/history.jpg
*February* *2013*: private repo, with liveral access (~200 people had access and helped to review, contribute, give feedback)
*March* *2013*: Docker 0.1 release at PyCon:
- requires LXC, AUFS;
- works on Debian/Ubuntu kernels
*June* *2014*: Docker 1.1, released at DockerCon
*May* *12* *2015*:  Docker 1.6.2, release 3 days ago

* Docker Community
.image dockerizing_development_workflow/github-logo-text-horizontal.png
- 21500+ Github Stars
- 900+ Github Contributors
- ~50% of the commits are done by community
.image dockerizing_development_workflow/docker_github_status.jpg

* What is Docker?
.image dockerizing_development_workflow/docker_logo.png 100 _
Docker is an open source platform to automate development cycle of applications inside software containers.

Build → ship → run *any* app, *anywhere*

- *Build*: package your application in a container
- *Ship*: move that container from a mashine to another
- *Run*: execite that container (i.e. your application)
- *Any* *application*: anything that runs on Linux
- *Anywhere*: local VM, cloud instance, bare metal, etc.


#Docker implements a high-level API to provide lightweight containers that run processes in isolation.  Building on top of facilities provided by the Linux kernel (primarily cgroups and namespaces), a Docker container, as opposed to a traditional virtual machine, does not require or include a separate operating system. Instead, it relies on the kernel's functionality and uses resource isolation (CPU, memory, block I/O, network, etc.) and separate namespaces to isolate the application's view of the operating system. Docker accesses the Linux kernel's virtualization features either directly through the provided libcontainer library (which is available since Docker 0.9), or indirectly via libvirt, LXC (Linux Containers) or systemd-nspawn.

* Docker Host OS requirement
.image dockerizing_development_workflow/Linux-Kernel-3.jpg
- Linux kernel 3.8+
- Union file system - AUFS, btrfs, vfs or DeviceMapper

* Docker vs VM
.image dockerizing_development_workflow/docker-containers-vs-vms.png 400 _
.caption Containers vs VMs. Diagram source: Docker Inc.
There's a great StackOverflow answer [[http://stackoverflow.com/questions/16047306/how-is-docker-io-different-from-a-normal-virtual-machine][showing the differences]]

* Docker vs VM
- Startup time is less for Docker than VMs (super fast)
- Docker images have much smaller size
- Snapshot process is faster in Docker than VMs
- Docker images have more portability
- Docker provides versioning of images
- Docker images do not have states
- Don't need SSH for access

* Docker vs native
- Docker helps to avoid lib version conflicts
- Docker has no or minimal overhead while using resource for visualization

* Docker Linux technology stack
.image dockerizing_development_workflow/docker-execdriver-diagram.png 400 _
.caption Docker can use different interfaces to access virtualization features of the Linux kernel. Diagram source: Docker Inc.

# Virtual machines have a full OS with its own memory management, device drivers, daemons, etc. Containers share the host’s OS and are therefore lighter weight.

* Docker architecture
- Docker Client
- Docker Daemon
- Docker Registry
.image dockerizing_development_workflow/docker-architecture-techtip39.png

* Docker Internals
- [[http://docs.docker.com/terms/image/][Docker image]]
- [[http://docs.docker.com/terms/layer/][Docker layer]]
- [[http://docs.docker.com/terms/container/][Docker container]]

- [[http://docs.docker.com/terms/repository/][Docker repository]]
- [[http://docs.docker.com/terms/registry/][Docker registry]]


* Docker Layers
.image dockerizing_development_workflow/docker-filesystems-debian.png 500 _

* Docker Layers
.image dockerizing_development_workflow/docker-filesystems-debianrw.png 500 _

* Docker Layers
.image dockerizing_development_workflow/docker-filesystems-multilayer.png 500 _

* Docker Layers
.image dockerizing_development_workflow/docker-filesystems-busyboxrw.png 500 _


* Use cases
1. Docker for local application development and test
# The primary challenge in maintaining a highly productive development environment for distributed applications can be summarized as:

	Works on my machine → Works again on my machine tomorrow → Works on a test machine

2. Docker for development team collaboration
# This use case focuses on how Docker can help members of a development team that need to work together on the same codebase. Beyond the challenges a solo developer experiences, described above, the additional problems for a development team working on code concurrently can be summarized as:

	Works on my machine → Works on your machine

3. Docker for continuous integration
# Typical challenges associated with CI include:

	- Complicated configuration of various types of build jobs (e.g., Maven, GCC and JUnit)
	- Need for a clean environment for the build or test, to eliminate possible contaminants
	- Managing the total execution time of the CI workflow
# Setup and execution time for build slaves is a key metric for effective CI.
# Test execution time has a material impact on software quality.
# The more time it takes to run the tests, the less testing will be done.

4. Docker for production application deployment
# The challenge in deploying containerized applications into a production environment can be summarized as:

	Works on my machine → Works on QA machines → Works (the same) on production hardware
	→ Stays working (securely) on the production environment

5. Docker for creating a private PAAS

* Docker vs Boot2Docker
.image dockerizing_development_workflow/boot2docker.png

* Demo time


* References
- [[http://docs.docker.com/][Official Docker documentation]]
- [[https://github.com/wsargent/docker-cheat-sheet][Docker Cheat Sheet]]
- [[http://blogs.gartner.com/richard-watson/ok-get-dockers-great/][Docker Use cases - Article]]
- [[https://linuxcontainers.org/][Linux Containers]]
- [[http://www.slideshare.net/jpetazzo/introduction-to-docker-december-2014-tour-de-france-bordeaux-special-edition][Introduction to Docker, December 2014 "Tour de France" Bordeaux Special Edition, Jérôme Petazzoni]]
- Official hosted registry [[https://hub.docker.com/][]]
