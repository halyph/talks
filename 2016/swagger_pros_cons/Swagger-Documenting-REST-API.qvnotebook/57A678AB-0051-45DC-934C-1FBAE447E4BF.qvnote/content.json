{
  "title": "Sample Swagger spec",
  "cells": [
    {
      "type": "markdown",
      "data": "### Reference: \n- http://rebilly.github.io/ReDoc/swagger.yaml\n\n```yaml\nswagger: '2.0'\nschemes:\n  - http\n  - https\nhost: petstore.swagger.io\nbasePath: /v2\ninfo:\n  description: |\n    This is a sample server Petstore server.\n    You can find out more about Swagger at\n    [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\n    For this sample, you can use the api key `special-key` to test the authorization filters.\n    # Introduction\n    This API is documented in **OpenAPI format** and is based on\n    [Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\n    It was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\n    tool and [ReDoc](https://github.com/Rebilly/ReDoc) documentation. In addition to standard\n    OpenAPI syntax we use a few [vendor extensions](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md).\n    # OpenAPI Specification\n    This API is documented in **OpenAPI format** and is based on\n    [Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\n    It was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\n    tool and [ReDoc](https://github.com/Rebilly/ReDoc) documentation. In addition to standard\n    OpenAPI syntax we use a few [vendor extensions](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md).\n    # Cross-Origin Resource Sharing\n    This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\n    And that allows cross-domain communication from the browser.\n    All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n    # Authentication\n    Petstore offers two forms of authentication:\n      - API Key\n      - OAuth2\n\n    OAuth2 - an open protocol to allow secure authorization in a simple\n    and standard method from web, mobile and desktop applications.\n    <!-- ReDoc-Inject: <security-definitions> -->\n  version: 1.0.0\n  title: Swagger Petstore\n  termsOfService: 'http://swagger.io/terms/'\n  contact:\n    email: apiteam@swagger.io\n  x-logo:\n    url: 'https://rebilly.github.io/ReDoc/petstore-logo.png'\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\nexternalDocs:\n  description: Find out how to create Github repo for your OpenAPI spec.\n  url: 'https://github.com/Rebilly/generator-openapi-repo'\ntags:\n  - name: pet\n    description: Everything about your Pets\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\nsecurityDefinitions:\n  petstore_auth:\n    description: |\n      Get access to data while protecting your account credentials.\n      OAuth2 is also a safer and more secure way to give you access.\n    type: oauth2\n    authorizationUrl: 'http://petstore.swagger.io/api/oauth/dialog'\n    flow: implicit\n    scopes:\n      'write:pets': modify pets in your account\n      'read:pets': read your pets\n  api_key:\n    description: |\n      For this sample, you can use the api key `special-key` to test the authorization filters.\n    type: apiKey\n    name: api_key\n    in: header\npaths:\n  /pet:\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: Add new pet to the store inventory.\n      operationId: addPet\n      consumes:\n        - application/json\n        - application/xml\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - in: body\n          name: body\n          description: Pet object that needs to be added to the store\n          required: true\n          schema:\n            $ref: '#/definitions/Pet'\n      responses:\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      x-code-samples:\n        - lang: 'C#'\n          source: |\n            PetStore.v1.Pet pet = new PetStore.v1.Pet();\n            pet.setApiKey(\"your api key\");\n            pet.petType = PetStore.v1.Pet.TYPE_DOG;\n            pet.name = \"Rex\";\n            // set other fields\n            PetStoreResponse response = pet.create();\n            if (response.statusCode == HttpStatusCode.Created)\n            {\n              // Successfully created\n            }\n            else\n            {\n              // Something wrong -- check response for errors\n              Console.WriteLine(response.getRawResponse());\n            }\n        - lang: PHP\n          source: \"$form = new \\\\PetStore\\\\Entities\\\\Pet();\\n$form->setPetType(\\\"Dog\\\");\\n$form->setName(\\\"Rex\\\");\\n// set other fields\\ntry {\\n    $pet = $client->pets()->create($form);\\n} catch (UnprocessableEntityException $e) {\\n    var_dump($e->getErrors());\\n}\\n\"\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: ''\n      operationId: updatePet\n      consumes:\n        - application/json\n        - application/xml\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - in: body\n          name: body\n          description: Pet object that needs to be added to the store\n          required: true\n          schema:\n            $ref: '#/definitions/Pet'\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      x-code-samples:\n        - lang: PHP\n          source: \"$form = new \\\\PetStore\\\\Entities\\\\Pet();\\n$form->setPetId(1);\\n$form->setPetType(\\\"Dog\\\");\\n$form->setName(\\\"Rex\\\");\\n// set other fields\\ntry {\\n    $pet = $client->pets()->update($form);\\n} catch (UnprocessableEntityException $e) {\\n    var_dump($e->getErrors());\\n}\\n\"\n  '/pet/{petId}':\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          type: integer\n          format: int64\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            $ref: '#/definitions/Pet'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      security:\n        - api_key: []\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: ''\n      operationId: updatePetWithForm\n      consumes:\n        - application/x-www-form-urlencoded\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          type: integer\n          format: int64\n        - name: name\n          in: formData\n          description: Updated name of the pet\n          required: false\n          type: string\n        - name: status\n          in: formData\n          description: Updated status of the pet\n          required: false\n          type: string\n      responses:\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: ''\n      operationId: deletePet\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          type: integer\n          format: int64\n      responses:\n        '400':\n          description: Invalid pet value\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  '/pet/{petId}/uploadImage':\n    post:\n      tags:\n        - pet\n      summary: uploads an image\n      description: ''\n      operationId: uploadFile\n      consumes:\n        - multipart/form-data\n      produces:\n        - application/json\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to update\n          required: true\n          type: integer\n          format: int64\n        - name: additionalMetadata\n          in: formData\n          description: Additional data to pass to server\n          required: false\n          type: string\n        - name: file\n          in: formData\n          description: file to upload\n          required: false\n          type: file\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            $ref: '#/definitions/ApiResponse'\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma seperated strings\n      operationId: findPetsByStatus\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          type: array\n          items:\n            type: string\n            enum:\n              - available\n              - pending\n              - sold\n            default: available\n          collectionFormat: csv\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/Pet'\n        '400':\n          description: Invalid status value\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: 'Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.'\n      operationId: findPetsByTags\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          type: array\n          items:\n            type: string\n          collectionFormat: csv\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/Pet'\n        '400':\n          description: Invalid tag value\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      produces:\n        - application/json\n      parameters: []\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: object\n            additionalProperties:\n              type: integer\n              format: int32\n      security:\n        - api_key: []\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: ''\n      operationId: placeOrder\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - in: body\n          name: body\n          description: order placed for purchasing the pet\n          required: true\n          schema:\n            $ref: '#/definitions/Order'\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            $ref: '#/definitions/Order'\n        '400':\n          description: Invalid Order\n  '/store/order/{orderId}':\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: 'For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions'\n      operationId: getOrderById\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          type: integer\n          maximum: 5\n          minimum: 1\n          format: int64\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            $ref: '#/definitions/Order'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors\n      operationId: deleteOrder\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          type: string\n          minimum: 1\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - in: body\n          name: body\n          description: Created user object\n          required: true\n          schema:\n            $ref: '#/definitions/User'\n      responses:\n        default:\n          description: successful operation\n  '/user/{username}':\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: ''\n      operationId: getUserByName\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: username\n          in: path\n          description: 'The name that needs to be fetched. Use user1 for testing. '\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            $ref: '#/definitions/User'\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be deleted\n          required: true\n          type: string\n        - in: body\n          name: body\n          description: Updated user object\n          required: true\n          schema:\n            $ref: '#/definitions/User'\n      responses:\n        '400':\n          description: Invalid user supplied\n        '404':\n          description: User not found\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          type: string\n      responses:\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithArrayInput\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - in: body\n          name: body\n          description: List of user object\n          required: true\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/User'\n      responses:\n        default:\n          description: successful operation\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithListInput\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - in: body\n          name: body\n          description: List of user object\n          required: true\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/User'\n      responses:\n        default:\n          description: successful operation\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: ''\n      operationId: loginUser\n      produces:\n        - application/xml\n        - application/json\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          type: string\n      responses:\n        '200':\n          description: successful operation\n          schema:\n            type: string\n          examples:\n            application/json: OK\n          headers:\n            X-Rate-Limit:\n              type: integer\n              format: int32\n              description: calls per hour allowed by the user\n            X-Expires-After:\n              type: string\n              format: date-time\n              description: date in UTC when toekn expires\n        '400':\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: ''\n      operationId: logoutUser\n      produces:\n        - application/xml\n        - application/json\n      parameters: []\n      responses:\n        default:\n          description: successful operation\ndefinitions:\n  ApiResponse:\n    type: object\n    properties:\n      code:\n        type: integer\n        format: int32\n      type:\n        type: string\n      message:\n        type: string\n  Cat:\n    description: A representation of a cat\n    allOf:\n      - $ref: '#/definitions/Pet'\n      - type: object\n        properties:\n          huntingSkill:\n            type: string\n            description: The measured skill for hunting\n            default: lazy\n            enum:\n              - clueless\n              - lazy\n              - adventurous\n              - aggressive\n        required:\n          - huntingSkill\n  Category:\n    type: object\n    properties:\n      id:\n        description: Category ID\n        allOf:\n          - $ref: '#/definitions/Id'\n      name:\n        description: Category name\n        type: string\n        minLength: 1\n    xml:\n      name: Category\n  Dog:\n    description: A representation of a dog\n    allOf:\n      - $ref: '#/definitions/Pet'\n      - type: object\n        properties:\n          packSize:\n            type: integer\n            format: int32\n            description: The size of the pack the dog is from\n            default: 1\n            minimum: 1\n        required:\n          - packSize\n  HoneyBee:\n    description: A representation of a honey bee\n    allOf:\n      - $ref: '#/definitions/Pet'\n      - type: object\n        properties:\n          honeyPerDay:\n            type: number\n            description: Average amount of honey produced per day in ounces\n            example: 3.14\n        required:\n          - honeyPerDay\n  Id:\n    type: integer\n    format: int64\n  Order:\n    type: object\n    properties:\n      id:\n        description: Order ID\n        allOf:\n          - $ref: '#/definitions/Id'\n      petId:\n        description: Pet ID\n        allOf:\n          - $ref: '#/definitions/Id'\n      quantity:\n        type: integer\n        format: int32\n        minimum: 1\n        default: 1\n      shipDate:\n        description: Estimated ship date\n        type: string\n        format: date-time\n      status:\n        type: string\n        description: Order Status\n        enum:\n          - placed\n          - approved\n          - delivered\n      complete:\n        description: Indicates whenever order was completed or not\n        type: boolean\n        default: false\n    xml:\n      name: Order\n  Pet:\n    type: object\n    required:\n      - name\n      - photoUrls\n    discriminator: petType\n    properties:\n      petType:\n        description: Type of a pet\n        type: string\n      id:\n        description: Pet ID\n        allOf:\n          - $ref: '#/definitions/Id'\n      category:\n        description: Categories this pet belongs to\n        allOf:\n          - $ref: '#/definitions/Category'\n      name:\n        description: The name given to a pet\n        type: string\n        example: Guru\n      photoUrls:\n        description: The list of URL to a cute photos featuring pet\n        type: array\n        xml:\n          name: photoUrl\n          wrapped: true\n        items:\n          type: string\n          format: url\n      tags:\n        description: Tags attached to the pet\n        type: array\n        xml:\n          name: tag\n          wrapped: true\n        items:\n          $ref: '#/definitions/Tag'\n      status:\n        type: string\n        description: Pet status in the store\n        enum:\n          - available\n          - pending\n          - sold\n    xml:\n      name: Pet\n  Tag:\n    type: object\n    properties:\n      id:\n        description: Tag ID\n        allOf:\n          - $ref: '#/definitions/Id'\n      name:\n        description: Tag name\n        type: string\n        minLength: 1\n    xml:\n      name: Tag\n  User:\n    type: object\n    properties:\n      id:\n        description: User ID\n        $ref: '#/definitions/Id'\n      username:\n        description: User supplied username\n        type: string\n        minLength: 4\n        example: John78\n      firstName:\n        description: User first name\n        type: string\n        minLength: 1\n        example: John\n      lastName:\n        description: User last name\n        type: string\n        minLength: 1\n        example: Smith\n      email:\n        description: User email address\n        type: string\n        format: email\n        example: john.smith@example.com\n      password:\n        type: string\n        description: 'User password, MUST contain a mix of upper and lower case letters, as well as digits'\n        format: password\n        minLength: 8\n        pattern: '(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])'\n        example: drowssaP123\n      phone:\n        description: User phone number in international format\n        type: string\n        pattern: \"^\\\\+(?:[0-9]-?){6,14}[0-9]$\"\n        example: +1-202-555-0192\n        x-nullable: true\n      userStatus:\n        description: User status\n        type: integer\n        format: int32\n    xml:\n      name: User\n```"
    }
  ]
}